GEMINI_API_KEY=PLACEHOLDER_API_KEY

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


import React from 'react';
import Game from './components/Game';

const App: React.FC = () => {
  return (
    <div className="bg-gray-900 min-h-screen text-white flex flex-col items-center justify-center p-4">
      <div className="w-full max-w-4xl mx-auto">
        <header className="text-center mb-4">
          <h1 className="text-5xl font-bold text-shadow text-yellow-400">Blockfall</h1>
        </header>
        <main>
          <Game />
        </main>
        <footer className="text-center mt-4 text-xs text-gray-500">
          <p>Controls: Arrows/WASD to move, Up/W/X to rotate, Z for counter-rotate, Space for hard drop, C to hold, P/Esc to pause.</p>
        </footer>
      </div>
    </div>
  );
};

export default App;


import { Tetromino, TetrominoType } from './types';

export const GRID_WIDTH = 10;
export const GRID_HEIGHT = 22; // 20 visible rows + 2 hidden spawn rows
export const VISIBLE_GRID_HEIGHT = 20;
export const CELL_SIZE = 30; // in pixels

export const TETROMINOES: Record<TetrominoType, Tetromino> = {
  'I': {
    shape: [[1, 1, 1, 1]],
    color: '#00FFFF',
    className: 'bg-cyan-400 border-cyan-200'
  },
  'O': {
    shape: [[1, 1], [1, 1]],
    color: '#FFD700',
    className: 'bg-yellow-400 border-yellow-200'
  },
  'T': {
    shape: [[0, 1, 0], [1, 1, 1]],
    color: '#800080',
    className: 'bg-purple-500 border-purple-300'
  },
  'S': {
    shape: [[0, 1, 1], [1, 1, 0]],
    color: '#00FF00',
    className: 'bg-green-500 border-green-300'
  },
  'Z': {
    shape: [[1, 1, 0], [0, 1, 1]],
    color: '#FF0000',
    className: 'bg-red-500 border-red-300'
  },
  'J': {
    shape: [[1, 0, 0], [1, 1, 1]],
    color: '#0000FF',
    className: 'bg-blue-600 border-blue-400'
  },
  'L': {
    shape: [[0, 0, 1], [1, 1, 1]],
    color: '#FFA500',
    className: 'bg-orange-500 border-orange-300'
  },
};

export const PIECE_START_POS: Record<TetrominoType, { x: number, y: number }> = {
    I: { x: 3, y: 0 },
    O: { x: 4, y: 0 },
    T: { x: 3, y: 0 },
    S: { x: 3, y: 0 },
    Z: { x: 3, y: 0 },
    J: { x: 3, y: 0 },
    L: { x: 3, y: 0 },
};

// Super Rotation System (SRS) Wall Kick Data
// For J, L, S, Z, T pieces
export const WALL_KICK_DATA: { [key: number]: [number, number][] } = {
  0: [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2]], // 0 -> 1
  1: [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],    // 1 -> 0
  2: [[0, 0], [1, 0], [1, 1], [0, -2], [1, -2]],    // 1 -> 2
  3: [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2]],  // 2 -> 1
  4: [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],     // 2 -> 3
  5: [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2]], // 3 -> 2
  6: [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2]], // 3 -> 0
  7: [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],     // 0 -> 3
};

// For I piece
export const I_WALL_KICK_DATA: { [key: number]: [number, number][] } = {
  0: [[0, 0], [-2, 0], [1, 0], [-2, -1], [1, 2]], // 0 -> 1
  1: [[0, 0], [2, 0], [-1, 0], [2, 1], [-1, -2]],  // 1 -> 0
  2: [[0, 0], [-1, 0], [2, 0], [-1, 2], [2, -1]], // 1 -> 2
  3: [[0, 0], [1, 0], [-2, 0], [1, -2], [-2, 1]], // 2 -> 1
  4: [[0, 0], [2, 0], [-1, 0], [2, 1], [-1, -2]],  // 2 -> 3
  5: [[0, 0], [-2, 0], [1, 0], [-2, -1], [1, 2]], // 3 -> 2
  6: [[0, 0], [1, 0], [-2, 0], [1, -2], [-2, 1]],  // 3 -> 0
  7: [[0, 0], [-1, 0], [2, 0], [-1, 2], [2, -1]],  // 0 -> 3
};

export const GRAVITY_LEVELS = [
    48, 43, 38, 33, 28, 23, 18, 13, 8, 6, 
    5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 1
].map(frames => 1000 / (60 / frames)); // Convert frames at 60fps to ms per drop

// Scoring
export const SCORE_VALUES = {
  SINGLE: 100,
  DOUBLE: 300,
  TRIPLE: 500,
  TETRIS: 800,
  T_SPIN_MINI: 100,
  T_SPIN: 400,
  T_SPIN_SINGLE: 800,
  T_SPIN_DOUBLE: 1200,
  T_SPIN_TRIPLE: 1600,
  SOFT_DROP: 1,
  HARD_DROP: 2,
};

export const COMBO_BONUS = 50;
export const BACK_TO_BACK_MULTIPLIER = 1.5;

// Input timing
export const DAS = 170; // ms
export const ARR = 50; // ms
export const LOCK_DELAY = 500; // ms


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Blockfall</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
      body {
        font-family: 'Press Start 2P', cursive;
        background-color: #0d1117;
      }
      .text-shadow {
        text-shadow: 2px 2px 0px rgba(0,0,0,0.5);
      }
    </style>
  <script type="importmap">
{
  "imports": {
    "react": "https://aistudiocdn.com/react@^19.2.0",
    "react-dom/": "https://aistudiocdn.com/react-dom@^19.2.0/",
    "react/": "https://aistudiocdn.com/react@^19.2.0/"
  }
}
</script>
<link rel="stylesheet" href="/index.css">
</head>
  <body>
    <div id="root"></div>
  <script type="module" src="/index.tsx"></script>
</body>
</html>


import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

{
  "name": "Copy of Blockfall",
  "description": "A fully playable, polished clone of the classic Tetris game, built with React and Tailwind CSS. It features the 7-bag randomizer, Super Rotation System (SRS), a hold queue, and a detailed scoring system including T-spins.",
  "requestFramePermissions": []
}
{
  "name": "copy-of-blockfall",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.2.0",
    "react-dom": "^19.2.0"
  },
  "devDependencies": {
    "@types/node": "^22.14.0",
    "@vitejs/plugin-react": "^5.0.0",
    "typescript": "~5.8.2",
    "vite": "^6.2.0"
  }
}

<div align="center">
<img width="1200" height="475" alt="GHBanner" src="https://github.com/user-attachments/assets/0aa67016-6eaf-458a-adb2-6e31a0763ed6" />
</div>

# Run and deploy your AI Studio app

This contains everything you need to run your app locally.

View your app in AI Studio: https://ai.studio/apps/drive/1nBcHanO5PAwI_BQzo1Iwgt7BsI6o19Lr

## Run Locally

**Prerequisites:**  Node.js


1. Install dependencies:
   `npm install`
2. Set the `GEMINI_API_KEY` in [.env.local](.env.local) to your Gemini API key
3. Run the app:
   `npm run dev`

{
  "compilerOptions": {
    "target": "ES2022",
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "module": "ESNext",
    "lib": [
      "ES2022",
      "DOM",
      "DOM.Iterable"
    ],
    "skipLibCheck": true,
    "types": [
      "node"
    ],
    "moduleResolution": "bundler",
    "isolatedModules": true,
    "moduleDetection": "force",
    "allowJs": true,
    "jsx": "react-jsx",
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "allowImportingTsExtensions": true,
    "noEmit": true
  }
}

export type TetrominoType = 'I' | 'O' | 'T' | 'S' | 'Z' | 'J' | 'L';

export interface Tetromino {
  shape: number[][];
  color: string;
  className: string;
}

export interface Piece {
  type: TetrominoType;
  shape: number[][];
  x: number;
  y: number;
  rotation: number;
}

export type Grid = (TetrominoType | null)[][];

export enum GameState {
  MainMenu,
  Playing,
  Paused,
  GameOver,
}

import path from 'path';
import { defineConfig, loadEnv } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig(({ mode }) => {
    const env = loadEnv(mode, '.', '');
    return {
      server: {
        port: 3000,
        host: '0.0.0.0',
      },
      plugins: [react()],
      define: {
        'process.env.API_KEY': JSON.stringify(env.GEMINI_API_KEY),
        'process.env.GEMINI_API_KEY': JSON.stringify(env.GEMINI_API_KEY)
      },
      resolve: {
        alias: {
          '@': path.resolve(__dirname, '.'),
        }
      }
    };
});
